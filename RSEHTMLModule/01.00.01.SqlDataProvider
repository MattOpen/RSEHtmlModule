/****** Object:  Table [dbo].[RSEArticleToModule]    Script Date: 06/09/2014 14:15:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RSEArticleToModule](
	[DS_ID] [int] IDENTITY(1,1) NOT NULL,
	[UID] [nvarchar](50) NULL,
	[IPAddress] [nvarchar](100) NULL,
	[ResponseDateTime] [datetime] NULL,
	[UserID] [int] NOT NULL,
	[ArticleID] [int] NOT NULL,
	[ModuleID] [int] NOT NULL,
	[PortalID] [int] NULL,
 CONSTRAINT [PK_RSEArticleToModule] PRIMARY KEY CLUSTERED 
(
	[DS_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RSEArticle]    Script Date: 06/09/2014 14:15:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RSEArticle](
	[DS_ID] [int] IDENTITY(1,1) NOT NULL,
	[UID] [nvarchar](50) NULL,
	[IPAddress] [nvarchar](100) NULL,
	[ResponseDateTime] [datetime] NULL,
	[UserID] [int] NOT NULL,
	[ChangeDateTime] [datetime] NULL,
	[LastUserID] [int] NULL,
	[PortalID] [int] NULL,
	[TabID] [int] NULL,
	[viewcount] [int] NULL,
	[userDeleted] [int] NULL,
	[sysDeleted] [int] NULL,
	[ParentID] [int] NULL,
	[RefItemID] [int] NULL,
	[ItemType] [nvarchar](20) NULL,
	[OrderParentID] [int] NULL,
	[IsActive] [int] NULL,
	[language] [nvarchar](10) NOT NULL,
	[BaseName] [nvarchar](100) NULL,
	[BaseDescription] [nvarchar](max) NULL,
 CONSTRAINT [PK_RSEArticle] PRIMARY KEY CLUSTERED 
(
	[DS_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[vwRSEArticleToModule]    Script Date: 06/09/2014 14:16:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[vwRSEArticleToModule]
AS
SELECT     dbo.RSEArticleToModule.ModuleID, dbo.RSEArticleToModule.ArticleID, dbo.RSEArticle.DS_ID, dbo.RSEArticle.UID, dbo.RSEArticle.IPAddress, 
                      dbo.RSEArticle.ResponseDateTime, dbo.RSEArticle.UserID, dbo.RSEArticle.ChangeDateTime, dbo.RSEArticle.LastUserID, dbo.RSEArticle.PortalID, 
                      dbo.RSEArticle.TabID, dbo.RSEArticle.viewcount, dbo.RSEArticle.userDeleted, dbo.RSEArticle.sysDeleted, dbo.RSEArticle.ParentID, dbo.RSEArticle.RefItemID, 
                      dbo.RSEArticle.ItemType, dbo.RSEArticle.OrderParentID, dbo.RSEArticle.IsActive, dbo.RSEArticle.language, dbo.RSEArticle.BaseName, 
                      dbo.RSEArticle.BaseDescription
FROM         dbo.RSEArticle RIGHT OUTER JOIN
                      dbo.RSEArticleToModule ON dbo.RSEArticle.DS_ID = dbo.RSEArticleToModule.ArticleID

GO
/****** Object:  StoredProcedure [dbo].[RSEprocGetItemIDLanguage]    Script Date: 06/09/2014 14:16:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[RSEprocGetItemIDLanguage] 

(
 @UserID int ='',
 @ItemID int = '',
 @ItemType nvarchar(50) ,
 @ResultType nvarchar(50) = ''
)
AS
/*************************
liefert die DS_ID´s als array von Produkten, Companies etc mit den zugehörigen translation
und Sprachattributen de-DE, en-US
Übergabewerte sind
@ItemID = ProduktID, CompanyID...
@ItemType = Product, Company...

*************************/

	SET NOCOUNT ON

	
BEGIN
declare @ParentID int
declare @DNNInstance nvarchar(50) = ''
/*	--PRÜFUNG
declare @ItemID int set @ItemID = 45
declare @ItemType nvarchar(50) set @ItemType = 'product'
*/
declare @returnmessage nvarchar(500)
set @returnmessage = 'HINWEIS'
if @ResultType = '' or @ResultType is NULL set @ResultType = 'full'
declare @temptable table(SourceID int, [language] nvarchar(10), CultureName nvarchar(100), IDspalte int identity(1,1))
			
	if @ItemType = 'product' goto Product
	else if @ItemType = 'editarticle' goto Article
	else if @ItemType = 'NewLanguage' goto NewLanguage
	else goto endsave
				


Product:
set @ParentID = (select TOP 1 ParentID from Product where [ID] = @ItemID)
--	if focus = master
	if @parentid = 0
		BEGIN
			--aktueller DS
			insert into @temptable (SourceID) 
				values(@ItemID)	 
			
			set @parentid = @ItemID
			
			--suche alle verbundenen Sprachen
			insert into @temptable (SourceID)
				(select ID from Product 
					where [ParentID] = @ParentID
					and ID not in (select SourceID from @temptable)
					and Deleted = 0 and sysDeleted = 0
					)
		END
	ELSE
		BEGIN
--	if focus = slave
			insert into @temptable (SourceID)
				values(@ParentID)	 
				
			--suche alle verbundenen Sprachen
			insert into @temptable (SourceID)
				(select ID from Product 
					where [ParentID] = @ParentID
					and ID not in (select SourceID from @temptable)
					and Deleted = 0 and sysDeleted = 0
					)
		END

	update @temptable
		set temp.[language] = product.[language], temp.CultureName = @DNNInstance.dbo.Languages.CultureName
		-- ACHTUNG: DB muss angepasst werden
		from @temptable temp left join Product on ID = SourceID left join dbo.Languages on CultureCode = Product.[language]
		-- ACHTUNG: DB muss angepasst werden

goto SHOWRESULT

Article:
set @ParentID = (select TOP 1 ParentID from RSEArticle where [DS_ID] = @ItemID)
--	if focus = master
	if @parentid = 0
		BEGIN
			--aktueller DS
			insert into @temptable (SourceID) 
				values(@ItemID)	 
			
			set @parentid = @ItemID
			
			--suche alle verbundenen Sprachen
			insert into @temptable (SourceID)
				(select DS_ID from RSEArticle 
					where [ParentID] = @ParentID
					and DS_ID not in (select SourceID from @temptable)
					and userDeleted = 0 and sysDeleted = 0
					)
		END
	ELSE
		BEGIN
--	if focus = slave
			insert into @temptable (SourceID)
				values(@ParentID)	 
				
			--suche alle verbundenen Sprachen
			insert into @temptable (SourceID)
				(select DS_ID from RSEArticle 
					where [ParentID] = @ParentID
					and DS_ID not in (select SourceID from @temptable)
					and userDeleted = 0 and sysDeleted = 0
					)
		END

	update @temptable
		set temp.[language] = RSEArticle.[language], temp.CultureName = dbo.Languages.CultureName
		-- ACHTUNG: DB muss angepasst werden
		from @temptable temp left join RSEArticle on DS_ID = SourceID left join dbo.Languages on CultureCode = RSEArticle.[language]
		-- ACHTUNG: DB muss angepasst werden

goto SHOWRESULT


NewLanguage:
set @ParentID = (select TOP 1 ParentID from RSEArticle where [DS_ID] = @ItemID)
	if @parentid = 0
		BEGIN
			--aktueller DS
			insert into @temptable (SourceID) 
				values(@ItemID)	 
			
			set @parentid = @ItemID
			
			--suche alle verbundenen Sprachen
			insert into @temptable (SourceID)
				(select DS_ID from RSEArticle 
					where [ParentID] = @ParentID
					and DS_ID not in (select SourceID from @temptable)
					and userDeleted = 0 and sysDeleted = 0
					)
		END
	ELSE
		BEGIN
			insert into @temptable (SourceID)
				values(@ParentID)	 
				
			--suche alle verbundenen Sprachen
			insert into @temptable (SourceID)
				(select DS_ID from RSEArticle 
					where [ParentID] = @ParentID
					and DS_ID not in (select SourceID from @temptable)
					and userDeleted = 0 and sysDeleted = 0
					)
		END

	update @temptable
		set temp.[language] = RSEArticle.[language], temp.CultureName = dbo.Languages.CultureName
		-- ACHTUNG: DB muss angepasst werden
		from @temptable temp left join RSEArticle on DS_ID = SourceID left join dbo.Languages on CultureCode = RSEArticle.[language]
		-- ACHTUNG: DB muss angepasst werden


	select CultureName as NewText, CultureCode as NewEntryID 
	from dbo.Languages 
	where CultureCode not in (select [language] as EntryID from @temptable )
	order by CultureName
	
	GOTO endsave


SHOWRESULT:
if @ResultType = 'full'
	BEGIN
	select CultureName as Text, [language] as EntryID, * from @temptable  order by CultureName
	GOTO endsave
	END
--select * from @temptable  

if @ResultType = 'language'
	BEGIN
	select [language]from @temptable  order by CultureName
	goto endsave
	END



endsave:
end
GO
/****** Object:  StoredProcedure [dbo].[RSEprocGetArticle]    Script Date: 06/09/2014 14:16:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[RSEprocGetArticle] 

(
 @UserID int ='',
 @PortalID int = '',
 @ModuleID int = ''
)
AS
/*************************


*************************/

	SET NOCOUNT ON

	
BEGIN

--	if @ModuleID in (select ModuleID from dbo.RSEArticleToModule where ArticleID = @ItemID) GOTO endsave

	select  BaseName+' (ID: '+ convert(varchar,DS_ID)+' '+[language]+' )' as Text, [DS_ID] as EntryID,* 
	from dbo.RSEArticle 
	where PortalID = @PortalID and ParentID = 0 and userDeleted = 0 and sysDeleted = 0 

endsave:
end
GO
/****** Object:  Default [DF_RSEArticle_UID]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_UID]  DEFAULT (newid()) FOR [UID]
GO
/****** Object:  Default [DF_RSEArticle_ResponseDateTime]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_ResponseDateTime]  DEFAULT (getdate()) FOR [ResponseDateTime]
GO
/****** Object:  Default [DF_RSEArticle_ChangeDateTime]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_ChangeDateTime]  DEFAULT (getdate()) FOR [ChangeDateTime]
GO
/****** Object:  Default [DF_RSEArticle_userDeleted]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_userDeleted]  DEFAULT ((0)) FOR [userDeleted]
GO
/****** Object:  Default [DF_RSEArticle_sysDeleted]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_sysDeleted]  DEFAULT ((0)) FOR [sysDeleted]
GO
/****** Object:  Default [DF_RSEArticle_ParentID]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_ParentID]  DEFAULT ((0)) FOR [ParentID]
GO
/****** Object:  Default [DF_RSEArticle_OrderParentID]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_OrderParentID]  DEFAULT (@@identity) FOR [OrderParentID]
GO
/****** Object:  Default [DF_RSEArticle_IsActive]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
/****** Object:  Default [DF_RSEArticle_BaseName]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticle] ADD  CONSTRAINT [DF_RSEArticle_BaseName]  DEFAULT ('....') FOR [BaseName]
GO
/****** Object:  Default [DF_RSEArticleToModule_UID]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticleToModule] ADD  CONSTRAINT [DF_RSEArticleToModule_UID]  DEFAULT (newid()) FOR [UID]
GO
/****** Object:  Default [DF_RSEArticleToModule_ResponseDateTime]    Script Date: 06/09/2014 14:15:59 ******/
ALTER TABLE [dbo].[RSEArticleToModule] ADD  CONSTRAINT [DF_RSEArticleToModule_ResponseDateTime]  DEFAULT (getdate()) FOR [ResponseDateTime]
GO
/****** Object:  StoredProcedure [dbo].[RSEprocGetModuleSettings]    Script Date: 06/09/2014 14:22:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[RSEprocGetModuleSettings] 
(	
	@UserID as NVARCHAR(MAX), 
	@PortalID as NVARCHAR(MAX),
	@SettingName as NVARCHAR(MAX)=''
)
as
BEGIN
/*****
*	liefert Standardwerte
*	use:	execute [dbo].[RSEprocGetModuleSettings] @UserID=1, @PortalID=20
*****/

IF @SettingName <> '' GOTO ONEVALUE

DECLARE 
	@cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX);
    
--ENABLE FOR TEST ONLY
/*declare
    @PortalID as NVARCHAR(MAX),
    @UserID as NVARCHAR(MAX);
    set @UserID = '-1'
    set @PortalID = '5'
*/    
  

SET @cols = STUFF((
			SELECT distinct ',' + QUOTENAME(c.SettingName) 
            FROM (
				select * from RSEModuleSettings as I
				union
				select * from RSEUserSettings as J
				) as c
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)'),1,1,'')

set @query = 'SELECT PortalID, ' + @cols + ' from 
            (
                select 
					SettingName
                    , SettingValue
                    , PortalID
                from RSEModuleSettings
                where PortalID = '+ @PortalID + '
                
                union
                
                select 
					SettingName
                    , SettingValue
                    , PortalID
                from RSEUserSettings
                where PortalID = '+ @PortalID + 'and CreatedByUserID = '+ @UserID +'
           ) x
            pivot 
            (
                max(SettingValue)
                for SettingName in (' + @cols + ')
            ) p '
GOTO STARTQUERY

ONEVALUE:
set @query = '
    			SELECT SettingValue as '+ ''''+ @SettingName + '''' +'
				from RSEUserSettings
                where PortalID = '+ @PortalID + ' and CreatedByUserID = '+ @UserID +' and SettingName = '+''''+ @SettingName + ''''
                


STARTQUERY:
execute(@query)

endsave:
END
GO
